use('erp');
// Exercício 1: Utilizando o estágio $match, escreva uma agregação para retornar somente os clientes do sexo "MASCULINO".
db.clientes.aggregate([{$match: {sexo: "MASCULINO"}}]);
// Exercício 2: Utilizando o estágio $match, escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005.
use('erp');
db.clientes.aggregate([{$match: {sexo: "FEMININO", dataNascimento: {$gte: ISODate("1995-01-01"), $lte: ISODate("2005-01-01")}}}]);
// Exercício 3: Utilizando o estágio $match, escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005, limitando a quantidade de documentos retornados em 5.
use('erp');
db.clientes.aggregate([{$match: {sexo: "FEMININO", dataNascimento: {$gte: ISODate("1995-01-01"), $lte: ISODate("2005-01-01")}}}, {$limit: 5}]);
// Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.
use('erp');
db.clientes.aggregate([{$match: {"endereco.uf": "SC"}}, {$group: {_id: "$endereco.uf", total: {$sum: 1}}}]);
// Exercício 5: Agrupe os clientes por sexo. Retorne o total de clientes de cada sexo no campo total.
use('erp');
db.clientes.aggregate([{$group: {_id: "$sexo", total: {$sum: 1}}}]);
// Exercício 6: Agrupe os clientes por sexo e uf. Retorne o total de clientes de cada sexo no campo total.
use('erp');
db.clientes.aggregate([{$group: {_id: {estado: "$endereco.uf", sexo: "$sexo"}, total: {$sum: 1}}}, {$sort: {"_id": 1}}]);
// Exercício 7: Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento abaixo (não se importe com a ordem dos campos):
use('erp');
db.clientes.aggregate([{$group: {_id: {estado: "$endereco.uf", sexo: "$sexo"}, total: {$sum: 1}}}, {$sort: {"_id": 1}}, {$project: {_id: 0, estado: "$_id.estado", sexo: "$_id.sexo", total: 1}}]);
// Exercício 8: Descubra quais são os 5 clientes que gastaram o maior valor.
use('erp');
db.vendas.aggregate([{$group: {_id: "$clienteId", valorTotal: {$sum: "$valorTotal"}}}, {$sort: {valorTotal: -1}}, {$project: {_id: 1, valorTotal: 1}}, {$limit: 5}]);
use('erp');
db.vendas.aggregate([{$group: {_id: "$clienteId", valorTotal: {$reduce: {input:"$items", initialValue:{sum:0}, in: {sum:{$add:["$$value.sum", "$$this"]}}}}}}, {$sort: {valorTotal: -1}}, {$project: {_id: 1, valorTotal: 1}}, {$limit: 5}]);
// Exercício 9: Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019.
use('erp');
db.vendas.aggregate([{$match: {dataVenda: {$gte: ISODate("2019-01-01"), $lte: ISODate("2019-12-31")}}}, {$group: {_id: "$clienteId", valorTotal: {$sum: "$valorTotal"}}}, {$sort: {valorTotal: -1}}, {$project: {_id: 1, valorTotal: 1}}, {$limit: 10}]);
// Exercício 10: Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o o total de clientes.
// Dica: O operador $count pode simplificar sua query.
use('erp');
db.vendas.aggregate([{$group: {_id:"$clienteId", vendas: {$sum:1}}}, {$match: {vendas: {$gt:5}}}, {$group: {_id: null, numeroClientes: {$sum:1}}}, {$project: {_id: 0, "numeroClientes": 1}}]);
use('erp'); // usando o count
db.vendas.aggregate([{$group: {_id:"$clienteId", vendas: {$sum:1}}}, {$match: {vendas: {$gt:5}}}, {$count: "numeroClientes"}]);
// Exercício 11: Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020.
use('erp');
db.vendas.aggregate([{$match: {dataVenda: {$gte: ISODate("2020-01-01"), $lte: ISODate("2020-03-31")}}}, {$group: {_id:"$clienteId", vendas: {$sum:1}}}, {$match: {vendas: {$lt:3}}}, {$count: "numeroClientes"}]);
// Exercício 12: Descubra qual as três ufs que mais compraram no ano de 2020.
use('erp');
db.vendas.aggregate([
{$match: {dataVenda: {$gte: ISODate("2020-01-01"), $lte: ISODate("2020-12-31")}}}
{$lookup: {
  from: 'clientes',
  localField: 'clienteId',
  foreignField: 'clienteId',
  as: 'clientInfo'
}},
{$unwind: '$clientInfo'},
{$group: {_id: "$clientInfo.endereco.uf", totalDeVendas : {$sum:1}}},
{$sort: {"totalDeVendas": -1}},
{$limit: 3},
{$project: {totalDeVendas: 1, uf: "$_id", _id:0}}])
// Exercício 13: Encontre qual foi o total de vendas e a média de vendas de cada uf no ano de 2019. Ordene os resultados pelo nome da uf.
use('erp');
db.vendas.aggregate([
{$match: {dataVenda: {$gte: ISODate("2019-01-01"), $lte: ISODate("2019-12-31")}}},
{$lookup: {
  from: 'clientes',
  localField: 'clienteId',
  foreignField: 'clienteId',
  as: 'clientInfo'
}},
{$unwind: '$clientInfo'},
{$group: {_id: "$clientInfo.endereco.uf", totalDeVendas : {$sum:1}, mediaDeVendas: {$avg: "$valorTotal"}}},
{$sort: {"totalDeVendas": -1}},
{$sort: {uf: 1}},
{$project: {totalDeVendas: 1, uf: "$_id", mediaDeVendas: 1, _id:0}}])
